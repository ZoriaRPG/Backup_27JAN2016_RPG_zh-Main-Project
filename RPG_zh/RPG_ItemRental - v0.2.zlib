//Item Rental v 0.2
//Extension to RPG_Itms.zlib for RPG.zh v0.97.3

float TimedItems[512]; //Arbitrary value, at least 256. The standard ZC items are 0 to 255, but it 
			//is *technically possible* to exceed that with tricks, so you may use a larger array if needed.
			//The array index saize must be **TWICE** the number of items in a game. The latter half
			//of the array is used to store if a timer is running.
			
const int MAX_INVENTORY_ITEMS = 255; //This is based on an array, so the value is 0 to 255, for the standard 256 items.
const int T_INVENTORY_RUNNING = 256; //The value for a running timer is offset by this many index positions. 


const int RENTAL_TIME = 1800; //5 minutes = 5 * 50 (seconds) * 60 (frames)
const int STR_RENTAL_EXPIRED = 1; //The default message to show when a rental expires. 
const int SFX_RENTAL_EXPIRED = 63; //The default sound to play when a rental expires. 

const int DO_NOT_RENT = 2; //If the index of TimedItems[256+it] == 2, do not remove it from inventory, as it's fully owned. 

//Running the timers...

//Call every frame before Waitdraw()
void RunItemTimers(){
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q+T_INVENTORY_RUNNING] > 0 ) {
			TimedItems[q]--;
		}
	}
}

//Pause item timers, until resumed. This is an **IMPORTANT** courtesy function. You want to call this in 
//scripts that create lengthy dialogue.
void SuspendItemTimers(){
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q+T_INVENTORY_RUNNING] > 0 ) {
			TimedItems[q+T_INVENTORY_RUNNING] = 0;
		}
	}
}

//This resumes item timers that are suspended. 
void ResumeItemTimers(){
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q+T_INVENTORY_RUNNING] <= 0 ) {
			TimedItems[q+T_INVENTORY_RUNNING] = 1;
		}
	}
}

//Removes all rented items if the player dies, and nullifies their timers. Call every frame, after Waitdraw(), 
//and **after** any functions that refill HP (e.g. extra lives)
void RemoveItemsOnDeath(){
	if ( Link->HP <= 0 ) {
		for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
			if ( TimedItems[q] && Link->Item[q] ) {
				TimedItems[q] = 0;
				TimedItems[q+T_INVENTORY_RUNNING] = 0;
				Link->Item[q] = false;
			}
		}
	}
}

//Call to arbitrarily remove all rented items at any time, and nullify their timers.
void RemoveRentedItems(){
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q] && Link->Item[q] ) {
			TimedItems[q] = 0;
			TimedItems[q+T_INVENTORY_RUNNING] = 0;
			Link->Item[q] = false;
		}
	}
}

//Call to arbitrarily remove a specific rented item at any time, and nullify its timer.
void RemoveRentedItem(int it){
	if ( TimedItems[it] && Link->Item[it] ) {
		TimedItems[it] = 0;
		TimedItems[it+T_INVENTORY_RUNNING] = 0;
		Link->Item[it] = false;
	}
}


//Function to disable items, and handle alerting the player ( RentalTimerExpired().
//Run every frame after RunItemTimers() and before Waitdraw().
//use only one of the two variations of this, not both. 

//Use this version if you do not want to display a message when a timer expires. 
//It will play a sound by default, set by constant SFX_RENTAL_EXPIRED.
//The message, and sound will play only once per frame, even if the player loses more than one item at 
//precisely the same moment. 
void RentalTimeExpired(){
	bool playedSound = false;
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q+T_INVENTORY_RUNNING] > 0 && TimedItems[q] < 1 ) {
			if ( Link->Item[q] ){
				if ( ! playSound ) {
					playedSound = true;
					Game->PlaySound(SFX_RENTAL_EXPIRED);
				}
				Link->Item[q] = false;
			}
			TimedItems[q] = 0;
			TimedItems[q+T_INVENTORY_RUNNING] = 0;
		}
	}
	
}


//Use this version if you **DO** want to display a message when a timer expires. 
//If you wish to use a default message, set by constant STR_RENTAL_EXPIRED, set arg msg to '0'
//Otherwise, specify a string manually. It will play a sound by default, set by constant SFX_RENTAL_EXPIRED.
//The message, and sound will play only once per frame, even if the player loses more than one item at 
//precisely the same moment. 
void RentalTimeExpired(int msg){
	bool playedSound = false;
	for ( int q = 0; q <= ( SizeOfArray(TimedItems) * 0.5 ) q++ ){
		if ( TimedItems[q+T_INVENTORY_RUNNING] > 0 && TimedItems[q] < 1 ) {
			if ( Link->Item[q] ){
				if ( ! playSound ) {
					playedSound = true;
					Game->PlaySound(SFX_RENTAL_EXPIRED);
				}
				if ( msg ) {
					Screen->Message(msg); //Play a string with a value greater than 0.
				}
				if ( ! msg ) {
					Screen->Message(STR_RENTAL_EXPIRED); //if you feel lazy, use a constant. 
				}
				Link->Item[q] = false;
			}
			TimedItems[q] = 0;
			TimedItems[q+T_INVENTORY_RUNNING] = 0;
		}
	}
	
}

//Functions to set rental timers.


//Sets a timer for one item specified by arg it, to the amount of the constant RENTAL_TIME (defaults as 5 mins)
	//and starts timer. 
void SetTimedItemTimer(int it){
	TimedItems[it] = RENTAL_TIME;
	TimedItems[it+T_INVENTORY_RUNNING] = 1;
}

//Sets a timer for one item specified by arg it for duration specified by arg rentalTime; and starts timer.
void SetTimedItemTimer(int it, int rentalTime){
	TimedItems[it] = rentalTime;
	TimedItems[it+T_INVENTORY_RUNNING] = 1;
}


//Gauges

//Draws rental gauge for item in slot A, if it's rented.
void DrawRentalGaugeA(){
}

//Draws rental gauge for item in slot B, if it's rented.
void DrawRentalGaugeB(){
}

//Draws item charge gauge for item in slot A.
void DrawItemGaugeA(){
}

//Draws item charge gauge for item in slot A.
void DrawItemGaugeB(){
}


const int CHARGE_GAUGE = 0; //Index position of array index to store value of charge gauge.
const int MAX_CHARGE_AMOUNT = 60;
const int CHARGE_REFILL_RATE = 1; //pixels per second. 

void ReduceChargeGauge(int amount){
	ChargeItems[CHARGE_GAUGE] -= amount;
}

void RefillChargeGauge(){
	if ( ChargeItems[CHARGE_GAUGE] != MAX_CHARGE_AMOUNT ) {
		ChargeItems[CHARGE_GAUGE] += ( CHARGE_REFILL_RATE / 60 );
	}
}

float ChargeItems[]={  0, 	I_BOMB, 	CR_BOMBS, 
				I_ARROW1, 	CR_ARROWS, 
				I_ARROW2, 	CR_ARROWS, 
				I_ARROW3, 	CR_ARROWS, 
				I_SBOMB, 	CR_SBOMBS, 
				I_ROCSFEATHER, 	CR_SCRIPT25 };
	//Format: Duration of gauge (index 0), Item constant (1) , item counter constant (2), item 2 constant (3), item counter 2 constant (4), . 
	

	
//Replenishes ammo for items when gauge is full:
//Accepts an array inout as list[]
void ChargeGauge(int list){
	for ( int q = 1; q <= SizeOfArray(list); q += 2 ) {
		if ( list[CHARGE_GAUGE] > 0 ) {
			if ( list[q] && list[q+1] ) { //If the value stored in the index is not zero...
				if ( Link->Item[q] ) {
					if ( Game->MCounter[q+1] != 100 ) {
						Game->MCounter[q+1] = 100;
					}
					if ( Game->Counter[q+1] != 100 ) {
						Game->Counter[q+1] = 100;
					}
				}
			}
		}
	}
}

const int CHARGE_GAUGE_X = 0;
const int CHARGE_GAUGE_Y = 8;
const int CHARGE_GAUGE_WIDTH = 8;
const int CHARGE_GAUGE_HEIGHT = 8;
const int CHARGE_GAUGE_COLOUR = 16;
const int CHARGE_GAUGE_OPACITY = 50;
const int CHARGE_GAUGE_LAYER = 6;


void DisplayChargeGauge(int posX, int posY, int length, int width, int colour, bool transparent, int opacity){
	Screen->Rectangle(CHARGE_GAUGE_LAYER, posX, posY, posX+length, posY+width, CHARGE_GAUGE_COLOUR, 1, 0, 0, 0, transparent, opacity);
}



int RemCharge(){
	return ChargeGauge[CHARGE_GAUGE];
}

//Arguments
// D0: The item number of the item given.
// D1: The amount of time that the player should keep the item.
	//If '0', the constant RENTAL_TIME is used as a default. 
// D2: A message to display. Must be a string greater than '0'.
// D3: A sound to play. 
// D4: Set to a value of '1' to hold the item up with one hand. Set to a value of '2' to hold up with BOTH hands.
item script PickupRentalItem{
	void run(int it, int time, int message, int sound, int holdup){
		if ( message ) {
			Screen->Message(message);
		}
		if ( sound ) {
			Game->PlaySound(sound);
		{
		if ( time ) {
			SetTimedItemTimer(it, time);
		}
		if ( !time ) {
			SetTimedItemTimer(it);
		}
		if ( holdup == 1 ) {
			Link->Action = LA_HOLD1LAND;
			Link->HeldItem = it;
		}
		if ( holdup == 2 ) {
			Link->Action = LA_HOLD2LAND;
			Link->HeldItem = it;
		}
	}
}


//Item script to add to any item, to reduce the charge gauge. Normally used instead of ammunition. 
item script ReduceCharges{
	void run(int chargecost){
		ChargeItems[CHARGE_GAUGE] -= chargecost;
	}
}

//Item to refill charge gauge. Set D0 to the amount that the item should replenish, or set to '0' if 100%. 
item script ChargeGaugeRefill{
	void run(int amount) {
		if ( amount ) {
			ChargeItems[CHARGE_GAUGE] += amount;
		}
		else { 
			ChargeItems[CHARGE_GAUGE] = MAX_CHARGE_AMOUNT;
		}
	}
}
	
global script activeExample {
	void run(){
		while(true){
			RunItemTimers();
			RentalTimeExpired();
			DisplayChargeGauge(CHARGE_GAUGE_X, CHARGE_GAUGE_Y, RemCharge(), CHARGE_GAUGE_WIDTH, CHARGE_GAUGE_COLOUR, true, CHARGE_GAUGE_OPACITY);
			Waitdraw();
			RemoveItemsOnDeath();
			Waitframe();
			
		}
	}
}