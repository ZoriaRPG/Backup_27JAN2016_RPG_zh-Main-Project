//#Include CustomTango.zh

//GameVars indices
const int CHEST_EXISTS = 0;
const int CHEST_POSITION = 0;
const int CHEST_ITEM = 0;
const int CHEST_STATE = 0;
const int CHEST_PROPERTY = 0;
const int CHEST_SCREEN = 0;
const int CHEST_DMAP = 0;
const int CHEST_X;
const int CHEST_Y;
const int CHEST_Z;
const int CHEST_COMBO = 0;
const int CHEST_FLAG = 0; 


//Combo Types or IDs for Chest Flags.
const int CHEST_FLAG_UNLOCKED = 0;
const int CHEST_FLAG_LOCKED = 1;
const int CHEST_FLAG_BOSSLOCKED = 2;
const int CHEST_FLAG_TRAP_DIFFICULTY = 6; //How do we set difficulty? IFLAG  + CT?
const int CHEST_FLAG_TRAPPED = 4;
const int CHEST_FLAG_ENEMY_IN_BOX = 8; //Spawns an enemy if chest is opened; no menu?
					//Dow do we DETERMINE enemy? IFLAG  + CT?
const int CHEST_MIMIC = 16; //With this flag, make a mimic npc if player unlocks, or opens chest



//Settings
const int CHEST_PROXIMIMITY_MIN = 6;
const int CHEST_PROXIMITY_MAX = 16;

const int CHEST_PROXIMITY_DIR_LEFT = 1;
const int CHEST_PROXIMITY_DIR_UP = 2;
const int CHEST_PROXIMITY_DIR_RIGHT = 3;
const int CHEST_PROXIMITY_DIR_DOWN = 4;


const int SCREEN_D_CHEST_ITEM_TAKEN = 7;

void ClearChest(){
	//Clear the chest into in tje array if we chance screens
}

void UpdateChestCombos(){ //If the chest was o9pened, chance its combo.
		//Run before Waitdraw'90 if the proper ScreenD[] nreg is set
}

//Chest combos should use a script flag on layer 3 or 4. Then, their CT is ysed to sett their ;flag;

void Chests(int chestComboFlag, int chestLayer){
	bool chestExists;
	int chestCombo;
	bool proximity;
	int proximityToChest;
	bool facing;
	int chestItem;
	bool tookItem; //Used to store the Screen State for ST_ITEM.
			//This should be saved in Screen->D!
	
	int buffer[255]; //A bugger to store the item namel
	
	
	
	//Check for a chest combo on this screen, on a given layer.
	for ( int q = 0; q < 176; q++ ) {
		int cmb = GetLayerComboF(chestlayer,q);
		if ( cmb == chestComboFlag ) {
			chestEsists = true;
			chestCombo = q;
	}
	
	//if ( !chestCombo ) chestExists = false; //I
	//if ( chestExists ) {
	//	chestCombo--;
	
	if ( chestExists && !Screen->D[SCREEN_D_CHEST_ITEM_TAKEN] ) {
		chestItem = Screen->RoomType;
		itemdata itm = Game->LoadItemData(chestItem);
		itm->Getname(buffer); //Store item name from Item Editor in buffer.
		
		//If it exists, set the index of the global array to the item it contains, its type
		//and any special paramaters (traps, and such).
		
		Is(CHEST_EXISTS,1); 
		//Get chest properties via combo types and flags combined.
		int chestFlagDat = GetLayerComboD(chestLayer,chestCombo);
		int chestFlagInherent = GetLayerComboI(chestLayer,chestCombo);
		
		//Store the current screen in the array, so that we can avoid checks against it more than once.
		Is( CHEST_SCREEN, Game->GetCurScreen() );
		Is( CHEST_DMAP, Game->GetCurDMap() );
		
		//Store its X/Y coordinates in the array.
		Is ( CHEST_X, CenterX(chestCombo) );
		Is ( CHEST_Y, CenterY(chestCombo) );
		
		//If Link's coordinates are in proximity, check his direction.
		//if ( 
		//	( Link->X <= Is(CHEST_X) + CHEST_PROXIMIMITY_MIN && Link->X >= Is(CHEST_X) + CHEST_PROXIMIMITY_MAX ) //Above Chest
		//	||
		//	( Link->X >= Is(CHEST_X) + CHEST_PROXIMIMITY_MIN && Link->X <= Is(CHEST_X) + CHEST_PROXIMIMITY_MAX ) //Below Chest
		//	||
		//	( Link->Y >= Is(CHEST_Y) + CHEST_PROXIMIMITY_MIN && Link->Y <= Is(CHEST_Y) + CHEST_PROXIMIMITY_MAX ) //Right of Chest
		//	||
		//	( Link->Y <= Is(CHEST_Y) + CHEST_PROXIMIMITY_MIN && Link->Y >= Is(CHEST_Y) + CHEST_PROXIMIMITY_MAX ) //Left of Chest
		//)	//These checks are incorrect, and incomplete.
		//{
		//	proximity = true;
		//}
		//!We want to set proximity based on an int, and the direction instead.
		if 	( 
				( Link->X <= Is(CHEST_X) + 8  || Link->X >= Is(CHEST_X) - 8 ) 
				&& ( Link->Y <= Is(CHEST_Y) + 8 || Link->Y >= Is(CHEST_Y) - 8 )
			) 
			{	
				chestProximity = CHEST_PROXIMITY_DIR_LEFT;
			}
		) //Above Chest
			||
			( Link->X >= Is(CHEST_X) + CHEST_PROXIMIMITY_MIN && Link->X <= Is(CHEST_X) + CHEST_PROXIMIMITY_MAX ) //Below Chest
			||
			( Link->Y >= Is(CHEST_Y) + CHEST_PROXIMIMITY_MIN && Link->Y <= Is(CHEST_Y) + CHEST_PROXIMIMITY_MAX ) //Right of Chest
			||
			( Link->Y <= Is(CHEST_Y) + CHEST_PROXIMIMITY_MIN && Link->Y >= Is(CHEST_Y) + CHEST_PROXIMIMITY_MAX ) //Left of Chest
		)	//These checks are incorrect, and incomplete.
		{
			proximity = true;
		}
		
		//Check for proximity to link.
		if ( Link->Dir == DIR_UP && chestProximity == CHEST_PROXIMITY_DIR_DOWN ) {
			if ( Link->PressA ) { //If Link presses an appropriate button, bring up the chest menu.
				//ChestMenu();
			}
		}
		
		if ( Link->Dir == DIR_DOWN&& chestProximity == CHEST_PROXIMITY_DIR_UP ) {
			if ( Link->PressA ) { //If Link presses an appropriate button, bring up the chest menu.
				//ChestMenu();
			}
		}
		
		if ( Link->Dir == DIR_LEFT && chestProximity == CHEST_PROXIMITY_DIR_RIGHT ) {
			if ( Link->PressA ) { //If Link presses an appropriate button, bring up the chest menu.
				//ChestMenu();
			}
		}
		
		if ( Link->Dir == DIR_RIGHT && chestProximity == CHEST_PROXIMITY_DIR_LEFT ) {
			if ( Link->PressA ) { //If Link presses an appropriate button, bring up the chest menu.
				//ChestMenu(); 
			}
		}
		
		
		//! Compare CenterX/Y combo to+ 16 to CenterX/Y Link
		//! Possible use GridX/Y
		//ChestMenu();
	}
}

bool ChestMenu(int chestTypem int chestitem, int chestFlag, int chestState, int itemnameBuffer){
	//chest type flaf, item id, base flag, state, Item Editor name for menu display
	
}

const int CHEST_UNLOCK = 0;
const int CHEST_DISARM = 2;
const int CHEST_SEARCH = 1;

bool ChestAction(int type){
	if ( type == CHEST_UNLOCK ) {
		ChestUnlockingMenu();
	}
	if ( type == CHEST_SEARCH ) ChestSearchMenu();
	if ( type == CHEST_DISARM ) {
		ChestDisableTrapsMenu();
	}
}

bool ChestUnlockingMenu(int lockType){
	if ( lockType == CHEST_BOSS_LOCK && CHEST_FLAG_UNLOCKED 

int ChestUseKey(){
	int keys = Game->Counter[CR_KEYS];
	if ( keys < 1 ) return 0;
	else Game->Counter[CR_KEYS]--;
	UnlockChest();
}
	