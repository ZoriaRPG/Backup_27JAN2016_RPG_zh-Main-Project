//FFC Scripts- Effects

//D0- String to display
//D1- Screen->D register to save in
//D2- This doesn't seem to do anything.

AreaIntro
	void run(int string, int dat, int element)
	
ScrollLR
	// This function handles sideview left/right scrolling (b15+)
	// Length: Length (in pixels) of the room. 768 = 3 screen widths.
	// nOpenStart: start of open area of background (0 = no open area)
	// nOpenEnd: end of open area of background (0 = no open area)
	// nFFC_Cnt: the number of ffcs to scroll.
	// nStartSolidFFC: The starting range of solid ffcs.
	// nEndSolidFFC: The end range of solid ffcs.
	// 
	// The first ffc contain these arguments.
	// All ffc x positions are stored in an encode format
	// to allow them to be positioned anywhere in the virtual screen.
	// EncodeX = X/16. So scrolling ffcs must be place on tile boundaries.
	/////////////////////////////
	void run(int Length, int MaxFloorHeight, int nOpenStart, int nOpenEnd, int nFFC_Cnt, int nStartSolidFFC, int nEndSolidFFC)

//D0- Enemy ID.
//D1- How many explosions to make.
//D2- Music to play.
//D3- How long to freezs Link for?	
	
BossDeath{
	void run(int enemID, int numExplosions, int victoryMusic, int freezeLink)
	
//FFC Script: If you wish to use an FFC to generate this effect, assign this to a slot, update the constant above, then recompile. 

//FFC of death animation explosion, to use as alternative to global function.
//Do not call this directly, by assigning it to a screen FFC. This is designed to automatically run when needed.
//...unless you want something to look like it is perpetually exploding, but then, this will need modification to do that.
Explosion{
	void run (int fX, int fY, int numExplosions, int enemType)

//Functions to create an explosion using any pointer.
//FFC to use, number of explosions, type of explosion.
Explode(ffc f, int numExplosions, int explosionType)

Place on screen with an enemy, so that if it is killed by a specific type of weapon   ///
/// it spawms a different enemy. or produces a different effect.                          ///
/// D0: Enemy Number of SOurce Enemy to Affect.                                           ///
/// D1: Enemy to Replace D0 with on Contact with Trigger.                                 ///
/// D2: Trigger - Positive Number for Specific Item Number; Negative Number of LW Type.   ///
/////////////////////////////////////////////////////////////////////////////////////////////
/// Place one FFC of this script on the screen for each enemy to affect by it.            ///
/// You can cascade this by setting the replacement enemy type as a source type in        ///
/// a second instance of this FFC.                                                        ///
/// THis can be especially useful for spells: You can have enemies that are outwardly     ///
/// invincible, but are changed once affected by a spell or item. You can use the same    ///
/// sprite, or a variation of itl to reflect the change int he state of the enemy, or to  ///
/// make the change invisible to the player.                                              ///
/////////////////////////////////////////////////////////////////////////////////////////////

//Trigger is a specific item (item number in editor).
//Vulnerability is an item class (LW Type).

changeTerrain{
    void run (int originalCombo0, int newCombo0, int originalCombo1, int newCombo1, int originalCombo2, int newCombo2, int requiredItem_minLevel, int switches)

Place on screen with an enemy, so that if it is killed by a specific type of weapon   ///
/// it spawms a different enemy. or produces a different effect.                          ///
/// D0: Enemy Number of SOurce Enemy to Affect.                                           ///
/// D1: Enemy to Replace D0 with on Contact with Trigger.                                 ///
/// D2: Trigger - Positive Number for Specific Item Number; Negative Number of LW Type.   ///
/////////////////////////////////////////////////////////////////////////////////////////////
/// Place one FFC of this script on the screen for each enemy to affect by it.            ///
/// You can cascade this by setting the replacement enemy type as a source type in        ///
/// a second instance of this FFC.                                                        ///
/// THis can be especially useful for spells: You can have enemies that are outwardly     ///
/// invincible, but are changed once affected by a spell or item. You can use the same    ///
/// sprite, or a variation of itl to reflect the change int he state of the enemy, or to  ///
/// make the change invisible to the player.                                              ///

//Trigger is a specific item (item number in editor).
//Vulnerability is an item class (LW Type).

specialEnemyVulnerabilityII{
    void run (int enemy0, int enemy1, int enemy2, int enemy3, int enemy4, int enemy5, int trigger_vulnerability, int switches){
    
//D0 Item to Trigger Event
//D1 Combo to Change (- Flags to Change)
//D2 COmbo to become (- Map & Screen to use to change flagged combos)
//D3 ???
//D4 Sound to Play
//D5 Message to Display.
//D6 
//D7 


////////////////
//// When hit by an LWeapon satisfying the <trigger> condition, change
//// all combos on screen that match the <target> condition to what
//// <result> specifies.
////
//// <trigger>: This is what kind of LWeapon will trigger the combo
//// change. If positive, it specifies the item number that will
//// trigger this (e.g. I_ARROW2 will make Silver Arrows trigger
//// this). If negative or 0, it specifies the item class that will
//// trigger this (e.g. -IC_ARROW will make any arrow trigger this).
////
//// <target>: This is what combos that this trigger will change when
//// it is actually triggered. If positive, it specifies that all
//// combos on screen with the given Combo ID will be changed (e.g. a
//// 12 means change all instances of combo 12). If negative, it
//// specifies that all combos on screen with the given flag will be
//// changed (e.g. a -CF_SECRETS01 means to change all combos with the
//// Secret 1 flag on them).
////
//// <result>: This is what the target combos are changed to. If
//// positive, it specifies a combo id to change them to. If negative,
//// it instead specifies a map and screen to grab combos from. The
//// format is "-MMMYXX", where MMM is the map number, Y is the
//// screen's Y position on that map (from 0 to 7), and XX is the
//// screen's X position on that map (from 0 to 15). Every target
//// combo is changed to whatever combo is at the same coordinates on
//// that screen.
////
//// <dieOnComboChange>: If positive, this causes this ffc to cancel
//// if the combo underneath the ffc every changes its Combo ID.
////
//// <sound>: If this is non-zero, it causes the given sound to be
//// played when the trigger occurs.
////
//// <message>: If this is non-zero, it causes the given message to be
//// displayed when the trigger occurs.
WeaponTrigger {
    void run(int trigger, int target, int result, int dieOnComboChange, int sound, int message)

//D0- Enemy whose defense this adjusts.
//D1- Change in HP?
//D2- Item that affects defense?
//D3- Type of defense affected?
	
FFC_Enemy_Script_Defenses{
    void run(int enemyID, int hp, int defenceItem, int defenceType)
	
rec_MovingPlatform//A moving platform that goes in all directions.

//D0- Enemy to regenerate
//D1- How much to regenerate each time.
//D2- How often to regenerate.

regenerateEnemyHP
	oid run(int enemy, int regenAmount, int regenRate)
	
GetRupees{
    void run(int rup)//Gaih some rupees.
	
LoseRupees{
    void run(int rup)//Lose some rupees.
	
// Place this FFC on the screen, on which you want to perform a Triforce check.
// Arguments
// D0:  <target>: This is what combos that this trigger will change when it is actually triggered. 
// If positive, it specifies that all combos on screen with the given Combo ID will be changed 
// (e.g. a 12 means change all instances of combo 12). If negative, it specifies that all combos on 
// screen with the given flag will be changed (e.g. a -CF_SECRETS01 means to change all combos with the
// Secret 1 flag on them).
//
// D1: <result>: This is what the target combos are changed to. 
// If positive, it specifies a combo id to change them to. 
// If negative, it instead specifies a map and screen to grab combos from. 
// The format is "-MMMYXX", where MMM is the map number, Y is the screen's Y position on that map 
// (from 0 to 7), and XX is the screen's X position on that map (from 0 to 15). Every target
// combo is changed to whatever combo is at the same coordinates on that screen.
//
// D2: <dieOnComboChange>: If positive, this causes this ffc to cancel if the combo underneath the 
// ffc every changes its Combo ID.
//
// D3:  <sound>: If this is non-zero, it causes the given sound to be played when the trigger occurs.
//
// D4:  <message>: If this is non-zero, it causes the given message to be displayed when the trigger occurs.

triforceCheckSpotRangeFFC { //This is like a sensitive warp bersion of triforceCheckSpotPreciseFFC. 
//Place this FFC on the area that you want to use to activat the TF check.
  void run(int target, int result, int dieOnComboChange, int sound, int message) {
  
triforceCheckSpotTouchFFC { //This is like a sensitive warp bersion of triforceCheckSpotPreciseFFC. 
//Place this FFC on the area that you want to use to activat the TF check.
  void run(int target, int result, int dieOnComboChange, int sound, int message)

  //START = BUY; A = EQUIP
//D0: Price of item
//D1: Item to give (doesn't apply to upgrades)
//D2 & D3: Each item must have a unique combination PER SCREEN, each variable is 0 to 7
//D4: Info about this item (press A before buying only)
//D5: 'Dummy' item that unlocks this one (optional)

shopItem{
        void run ( int price, int giveItem, int type, int bit, int infoString, int unlocker )

//////////////////////////////////
///   SOLIDIFY FFCS & NPCs     ///
///  A SCRIPT BY LEMMY KOOPA   ///
/// A.K.A. HOT WATER MUSIC MAN ///
//////////////////////////////////
		
//D0 Message String to display.
//D1 Item needed to make NPC vanish.
//D2
//D3
//D4
//D5 0 for nonsolid, 1 for solid.
//D6
//D7


pit_enemy_only {
  void run(int m, int gmitem, int f, int d, int def_dir, int npcissolid, int gm_min, int gm_max)

//D0 is the radius
//D1 is the speed, negative for anti-clockwise movement
//D2 is the initial placement of the ffc, in degrees
//D3 turns the circle into an oval, with y-radius D3 and x-radius D0. Left at 0, it will be a circle.
//D4 B radius.
//D5 B speed
//D6 B angle
//D7 B 2nd radius
  
CircularMotion2{
    void run(int radius, int speed, int angle, int radius2, int radiusB, int speedB, int angleB, int radius2B)

     D0: SFX to play when the player presses 'START'.                       ///
/// Set fron Quest->Audio->SFX Data.                                       ///
///---------------------------{ D1: Delay Time }---------------------------///
/// D1: Length of time, between pressing start, and the game starting.     ///
/// Time this to match your SFX, where 60 = 1-second.                      ///
/// (240, would therefore be four-seconds, and is my default value.)       ///
///----------------------{ D2/D3: Warp Destinations }----------------------///
/// D2: If using a direct warp, set this to the DMAP number for the warp   ///
/// (not the'Map' number, but the 'DMAP' number), stating at 0.            ///
/// D3: If using direct warps, set this to the screen number for the       ///
/// warp destination. This will use WARP RETURN 'A'.                       ///
///------------------------{ D4: Secret Warp Mode }------------------------///
/// D4: If you are going to use a SENSITIVE WARP tile, placed under the    ///
/// player, to control the warp (and thus, control fade effects), then     ///
/// set this to a value of '1' (or greater). Set warp destinations from    ///
/// Screen->Tilewarp, and set your tile warp combo in Screen->Secrets, as  ///
/// SECRET TILE 0, then place Flag-16 over where te player is caged on     ///
/// your title screen.                                                     ///
//////////////////////////////////////////////////////////////////////////////


titleScreen {
    void run(int SFX, int timeValue, int W_DMAP_NUMBER, int W_SREEN_NUMBER, int secrets) 