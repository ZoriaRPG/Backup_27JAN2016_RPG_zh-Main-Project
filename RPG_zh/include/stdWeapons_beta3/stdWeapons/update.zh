//Main Lweapon update function. Must be called instead of original Waitframe, as in additional to
//waiting a frame, it updates basic parameters of lweapon and his master FFC.
//Returns TRUE, if lweapon pointer is still valid, otherwise returns FALSE.
bool LweaponWaitframe(ffc f, lweapon l){
	if (!(l->isValid())) return false;//Lweapon pointer is dangling. ouch...
	
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	if (!LweaponFlagIsSet(l, LWF_NO_FALL)) AffectedByGravity (f, l);	//Check gravity.
	if (LweaponFlagIsSet(l, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(f, l); //Pick one of the two ways to update
	else LweaponPosUpdate(f, l);//lweapon`s position depending on LWF_MOVE_OFFSCREEN flag.
	if (LweaponFlagIsSet(l, LWF_AUTO_DIR_UPDATE))LweaponDirUpdate(f, l); //Update lweapon`s direction for proper interaction with shielded enemies.
	if (LweaponFlagIsSet(l, LWF_CAN_PICKUP_ITEMS))ItemPickup (l, false); //Now check, if lweapon can pickup items.
	if (LweaponFlagIsSet(l, LWF_CAN_INSTA_DELIVER_ITEMS)) ItemPickup (l, true);//Or deliver them to Link instantly.
	if (l->Misc[LWEAPON_MISC_DEFENSE]>=0)UseEnemyDefense(l, 0, l->Misc[LWEAPON_MISC_DEFENSE]);//Check and use enemy defenses.
	if (LweaponFlagIsSet(l, LWF_MELEE)){
		if (LweaponFlagIsSet(l, LWF_SWING_WHILE_WALKING)){
			f->X = Link->X;
			f->Y= Link->Y;
		}
		else NoAction();
		TerminateLweaponOnLA(f,l);
	}
	if (LweaponFlagIsSet(l, LWF_AUTO_SPRITE_UPDATE))LweaponSpriteUpdate (l);//Update sprite flipping depending on directions. Uses next sprite in the list
	//for diagonal directions.
	FastShadow (f, l);//Draw shadow, if needed.
	int DrawX = l->DrawXOffset; //Backup DrawXoffset prior to custom drawing function.
	DrawCustomSprite(l); // Use custom drawing algorithm.
	
	Waitframe(); //Moment of truth!
	
	if (!(l->isValid())) return false;//Lweapon pointer is now dangling. ouch...
	//DrawLweaponHitbox(l);
	
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	
	if (l->DrawXOffset>=1000)l->DrawXOffset=DrawX; //Fix draw offset, if custom drawing is used.
	
	return true; //End of routine, return to main script. 
}

//Unlike previous function, does not return anything and can automatimcally
//terminate the script if lweapon becomes invalid, complete with FFC cleanup.
void LweaponWaitframe (ffc f, lweapon l, bool quitoninvalid){
	if (!LweaponWaitframe(f, l)){
		if (quitoninvalid){//Lweapon pointer is dangling and it`s instructed to end here?
			ClearFFC(f);//Clean FFC for recycling.
			Game->PlaySound(SFX_DEBUG_TERMINATE); //Play debug terminating sound. Usually silence.
			Quit();//Finita la comedia.
		}
	}
}

//Multiple waitframes activated one after another.
void LweaponWaitframes (ffc f, lweapon l, bool quitoninvalid, int numframes){
	for (int i=1; i<= numframes; i++){
		LweaponWaitframe (f, l, quitoninvalid);
	}
}


//Updates Lweapon`s direction depending on FFC`s velocity. Needed for proper interaction with shielded enemies.
void LweaponDirUpdate( ffc f, lweapon l){
	if ((f->Vx==0)&&(f->Vy==0)) return;
	if (!LweaponFlagIsSet(l, LWF_8WAY)) l->Dir=RadianAngleDir4(ArcTan(f->Vx, f->Vy));
	else l->Dir=RadianAngleDir8(ArcTan(f->Vx, f->Vy));
}

//Puts Lweapon at FFC`s position.
void LweaponPosUpdate( ffc f, lweapon l){
	l->X= f->X;
	l->Y= f->Y;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitXOffset = l->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitYOffset = l->Misc[LWEAPON_MISC_HIT_OFFSET_Y];
	if (!IsSideview()) l->Z = f->Misc[FFC_MISC_Z]; //Z-axis does not exist in sideview screens.
}

//Another way to update lweapon`s position.
//This method uses Draw & Hitbox offsets, and Lweapon can go off-screen without disappearing.
void LweaponPosUpdateAlt(ffc f, lweapon l){
	int HitX = f->X - l->X;
	int HitY = f->Y - l->Y;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->DrawXOffset = HitX;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitXOffset = HitX + l->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->DrawYOffset = HitY;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitYOffset = HitY + l->Misc[LWEAPON_MISC_HIT_OFFSET_Y];
	if (!IsSideview()) l->Z = f->Misc[FFC_MISC_Z];
}

//Updates Lweapon`s sprite flipping depending on it`s direction. Uses next sprite for non-cardinal directions.
void LweaponSpriteUpdate (lweapon l){
	if (l->Dir<4) l->OriginalTile = l->Misc[LWEAPON_MISC_ORIGTILE];
	else l->OriginalTile = l->Misc[LWEAPON_MISC_ORIGTILE]+ (l->TileWidth* l->NumFrames);
 	if (l->Dir==DIR_UP) l->Flip=0;
	else if (l->Dir==DIR_DOWN) l->Flip=2;
	else if (l->Dir==DIR_LEFT) l->Flip=5;
	else if (l->Dir==DIR_RIGHT) l->Flip=4;
	else if (l->Dir==DIR_RIGHTUP)	l->Flip=0;
	else if (l->Dir==DIR_LEFTUP) l->Flip=1;
	else if (l->Dir==DIR_LEFTDOWN) l->Flip=3;
	else if (l->Dir==DIR_RIGHTDOWN) l->Flip=2;
}

void DrawCustomSprite(lweapon l){
	int layer = CUSTOM_SPRITE_DRAW_LAYER;
	if (l->Behind) layer = 0;
	l->DrawXOffset+=1500;
	int DrawX= l->X + l->DrawXOffset - 1500;
	int DrawY = l->Y + l->DrawYOffset - l->Z - l->DrawZOffset;
	int flip = l->Flip;
	int tile = l->Tile;
	int cset = l->CSet;
	if (LweaponFlagIsSet(l, LWF_MELEE)){
		tile= l->OriginalTile;
		cset = l->OriginalCSet;
	}
	int rot = 0;
	if (l->Flip==4){
		rot = 90;
		flip = 0;
	}
	else if (l->Flip==5){
		rot =90;
		flip=2;
	}
	else if (l->Flip==6){
		rot = 270;
		flip=2;
	}
	else if (l->Flip==7){
		rot =270;
		flip = 0;
	}
	Screen->DrawTile(layer, DrawX, DrawY, tile, l->TileWidth, l->TileHeight, cset, -1, -1, DrawX, DrawY, rot, flip, true, OP_OPAQUE);
}

//A simpler way to draw shadow beneath lweapon. Uses constants from the main library file.
void FastShadow (ffc f, lweapon l){
	bool translucent = (LWEAPON_SHADOW_TRANSLUCENT>0);
	bool flicker = (LWEAPON_SHADOW_FLICKER>0);
	bool static = (!(LWEAPON_SHADOW_NUMFRAMES>1));
	int ltx = l->TileWidth;
	int lty = l->TileHeight;
	if((LWEAPON_LARGE_SHADOW_TILE!=0)&&(ltx>=LWEAPON_LARGE_SHADOW_MIN_WIDTH)&&(lty>=LWEAPON_LARGE_SHADOW_MIN_HEIGHT)){
		static = (!(LWEAPON_LARGE_SHADOW_FRAMES>1));
		}
	DrawShadow(f,l, flicker, translucent, static);
}

//Draws shadow of Lweapon in ground. Internal function.
void DrawShadow(ffc f, lweapon l, bool flickering, bool translucent, bool static){
	if (l->Z == 0) return;
	if (IsSideview()) return;
	if (LWEAPON_SHADOW_TILE == 0) return;
	int counter = f->Misc[FFC_MISC_SHADOW_COUNTER];
	int ltx = l->TileWidth;
	int lty = l->TileHeight;
	bool largeshadow = false;
	if((LWEAPON_LARGE_SHADOW_TILE!=0)&&(ltx>=LWEAPON_LARGE_SHADOW_MIN_WIDTH)&&(lty>=LWEAPON_LARGE_SHADOW_MIN_HEIGHT)){
		largeshadow = true;
		}
	f->Misc[FFC_MISC_SHADOW_COUNTER] ++;	
	int aspeed = LWEAPON_SHADOW_ASPEED;
	if (largeshadow) aspeed = LWEAPON_LARGE_SHADOW_ANIM_SPEED;
	int numframes = LWEAPON_SHADOW_NUMFRAMES;
	if (largeshadow) numframes = LWEAPON_LARGE_SHADOW_FRAMES; 
	if (counter >= (aspeed*numframes)) counter = 0;
	int tile = LWEAPON_SHADOW_TILE;
	if (largeshadow) tile = LWEAPON_LARGE_SHADOW_TILE;
	int Lx = l->X + l->DrawXOffset;
	int Ly = l->Y + l->DrawYOffset;
	int sizex = 1;
	if (largeshadow) sizex = 2;
	int sizey = 1;
	if (largeshadow) sizey = 2;
	int cset = LWEAPON_SHADOW_CSET;
	if (largeshadow) cset = LWEAPON_LARGE_SHADOW_CSET;
	if ((IsOdd(counter))&&flickering) return;
	int offset = sizex*(Floor(counter/aspeed));
	if (!static) tile += offset;
	int trindex = OP_OPAQUE;
	if (translucent) trindex = OP_TRANS;
	Screen->DrawTile(1, Lx, Ly, tile, sizex, sizey, cset, -1, -1, 0, 0, 0, 0, true, trindex);
	return;
}

//Terminates melee lweapon automatically, if Link is unable to continue using it, like after getting hit
//or getting major treasure.
void TerminateLweaponOnLA(ffc f, lweapon l){
	if (Link->Action >2) TerminateLweapon (f, l);
}

void LweaponDebugValue ( int num, float value){
	Screen->DrawInteger(6, 100, 2+10*num, FONT_S, 1, 15, -1, -1, value, 0, OP_OPAQUE);
}