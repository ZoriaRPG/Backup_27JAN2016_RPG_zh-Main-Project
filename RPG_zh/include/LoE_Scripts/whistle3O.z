import "std.zh"
import "ffcscript.zh"

///////////////
/// Globals ///
///////////////

const int DMAP_ONE_PAST = 20;
const int DMAP_ONE_FUTURE = 8;
const int DMAP_TWO_PAST = 32;
const int DMAP_TWO_FUTURE = 33;
const int DMAP_THREE_PAST = 52;
const int DMAP_THREE_FUTURE = 5;

const int warpError = 0;
const int warpSFX = 16;
const int warpWave = 100;
const int warpFFC = 1;
const int warpSpotFFC = 0;
const int warpDuration = 60;
const int warpCircleColour = 5;
const int postWarpDelay = 15;

const int SONG_ONE = 0;
const int SONG_TWO = 0;
const int SONG_THREE = 21;

bool warpAllowed = true;
int warpArray[12] = {0,0,0,0,0,0,0,0,0,0,0,0};


const int warpOriginDMAP = 0;
const int warpDestDMAP = 1;
const int warpCurrentScreen = 2;
const int warpLinkX = 3;
const int warpLinkY = 4;
const int warpLinkZ = 5;
const int warpSpotX = 6;
const int warpSpotY = 7;
const int warpSpotScreen = 8;
const int warpSpotDMAP = 9;
const int warpSwapA = 10;
const int warpSwapB = 11;

const int SOLIDITY_CHECK_DISTANCE = 7;

bool touchingSolid(int x, int y) {
    if ( Screen->isSolid(x,y) || 
    Screen->isSolid(x + SOLIDITY_CHECK_DISTANCE, y) || 
    Screen->isSolid(x + SOLIDITY_CHECK_DISTANCE, y+SOLIDITY_CHECK_DISTANCE) || 
    Screen->isSolid(x + SOLIDITY_CHECK_DISTANCE, y-SOLIDITY_CHECK_DISTANCE) || 
    Screen->isSolid(x - SOLIDITY_CHECK_DISTANCE, y) || 
    Screen->isSolid(x - SOLIDITY_CHECK_DISTANCE, y+SOLIDITY_CHECK_DISTANCE) || 
    Screen->isSolid(x - SOLIDITY_CHECK_DISTANCE, y-SOLIDITY_CHECK_DISTANCE) ) {
        return true;
    }
    else {
        return false;
    }
}



////////////////////
/// Item Scripts ///
////////////////////

//D0: SFX of Warp Sound, not song.
//D1: Duration of song for time warp in frames (60 frames/second)
//Set song to play in the constant SONG_THREE.
//D2: Cost (MP, or otherwise)
//D3: Counter to use.
//D4: Colour for FFC Visual effect.


item script timeWarp {
    void run(int warpSound, int warpTime, int warpCost, int warpCounter, int warpColour){
        int originMap;
        int destMap;
        int locX;
        int locY;
        int currScreen;
        
        int LinkX = Link->X;
        int LinkY = Link->Y;
        int LinkZ = Link->Z;
        originMap = Game->GetCurDMap();
        currScreen = Game->GetCurDMapScreen();
        
        int args[3] = {warpSound, warpTime, warpColour};
        
        if ( originMap == DMAP_ONE_PAST ) {
            destMap = DMAP_ONE_FUTURE;
        }
        else if ( originMap == DMAP_TWO_PAST ) {
            destMap = DMAP_TWO_FUTURE;
        }
        else if ( originMap == DMAP_THREE_PAST ) {
            destMap = DMAP_THREE_FUTURE;
        }
        
        else if ( originMap == DMAP_ONE_FUTURE ) {
            destMap = DMAP_ONE_PAST;
        }
        else if ( originMap == DMAP_TWO_FUTURE ) {
            destMap = DMAP_TWO_PAST;
        }
        else if ( originMap == DMAP_THREE_FUTURE ) {
            destMap = DMAP_THREE_PAST;
        }
            
                
                
        warpArray[warpOriginDMAP] = originMap;
        warpArray[warpDestDMAP] = destMap;
        warpArray[warpCurrentScreen] = currScreen;
        warpArray[warpLinkX] = LinkX;
        warpArray[warpLinkY] = LinkY;
        warpArray[warpLinkZ] = LinkZ;
        
        if ( warpCost == 0 && warpAllowed ) {
            RunFFCScript(warpFFC, args);
        }
        
        else if ( warpCost > 0 && warpAllowed ) {
            if ( warpCounter >= warpCost ) {
                warpCounter -= warpCost;
                RunFFCScript(warpFFC, args);
            }
            else {
                Game->PlaySound(warpError);
            }    
        }            
        
        else {
            Game->PlaySound(warpError);
        }        
    }
}

///////////////////
/// FFC Scripts ///
///////////////////



ffc script mirrorWarp {
    void run(int warpSound, int warpTime, int warpColour) {
        bool warping = true;
        int originMap = warpArray[warpOriginDMAP];
        int destMap = warpArray[warpDestDMAP];
        int locX;
        int locY;
        int LinkX = warpArray[warpLinkX];
        int LinkY = warpArray[warpLinkY];
        int LinkZ = warpArray[warpLinkZ];
        int currScreen = warpArray[warpCurrentScreen];
        int startHP = Link->HP;
        
        
        
        if (Link->Action == LA_NONE && warpAllowed ) {
            //if (Link->Action == LA_NONE || Link->Action == LA_WALKING && warpAllowed ) 
            //Warp only if not moving.
        
            for(int i = warpDuration; i > 0; i--){ //Duration of song.
                NoAction(); //Freeze Link
                Game->PlaySound(SONG_THREE);
                //Create animation.
                Screen->Circle ( 7, Link->X+8, Link->Y+8, 20*i/warpDuration, warpCircleColour, 1, 0, 0, 0, false, 64 );
                
                if ( Link->HP < startHP ) {
                    return; //If Link is hurt, quit
                }
                Waitframe();
            }
            
            isWarping = true;
            return;
        }
            
        else {
            Game->PlaySound(warpError);
            warping = false;
            return;
        }
    }
}


ffc script allowWarps {
    void run() {
        while(true){
            if ( warpAllowed == false ) {
                warpAllowed = true;
            }
        Waitframe();
        }
    }
}

ffc script forbidWarps {
    void run() {
    bool notScrolling = true;
        while(true) {
        
            if ( warpAllowed == true && Link->Action != LA_SCROLLING ) {
                warpAllowed = false;
            }
            if ( warpAllowed == false && Link->Action == LA_SCROLLING ) {
                warpAllowed = true;
            }
            Waitframe();
        }
    }
}



//Link-to-Combo interaction functions
//
//All these functions use the so called "sensivity" which works like "Damage combo sensivity"
//value in "Screen Data" window in ZQuest. 

//Returns TRUE if Link touches the combo.
bool LinkComboCollision(int loc, int sens){
	int ax = Link->X;
	int ay = Link->Y;
	int bx = (Link->X)+(Link->HitWidth);
	int by = (Link->Y)+(Link->HitHeight);
	if(!(RectCollision( ComboX(loc), ComboY(loc), (ComboX(loc)+16), (ComboY(loc)+16), ax, ay, bx, by))) return false;
	else if (!(Distance(CenterLinkX(), CenterLinkY(), (ComboX(loc)+8), (ComboY(loc)+8)) < (sens+8))) return false;
	else return true;
}

//Returns INT if Link touches any combo of specific type.
int LinkComboTypeCollision(int type, int sens){
	for(int i = 0; i < 176; i++){
		if (Screen->ComboT[i]==type){
			if (LinkComboCollision(i, sens)) return i;
		}
	}
	return -1;
}
