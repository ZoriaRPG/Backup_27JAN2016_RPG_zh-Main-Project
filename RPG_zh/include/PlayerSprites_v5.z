import "std.zh"
int PlayerSprites[512] = {88};

const int OLD_LINK_TILE = 1;
const int ZQ_LAST_TILE = 65519;
const int ZQ_BLANK_TILE = 65518;

const int TILES_BACKUP = 62560;
const int TILES_BLANK = 65000;

const int BASE_TILE = 35620;
const int TILE_LENGTH = 260; //EACH TILE PAGE CONTAINS 259 TILES.

const int ZQ_SPRITE_BLANK = 255;

bool IsInvisible;
bool TilesCopiedInvis;
bool TilesCopiedVis = true;

int LastLinkX;
int LastLinkY;
bool LinkMoved;
int PlayerFrameDelay; //These need to be in an array, to match the size of PlayerSprites (512)
int PlayerFrame;

int IsInvisible[512]; //Array to hold if Link should be invisible, per DMAP.
int SpriteAnimFrameDelay[512];
int SpriteAnimFrames[512];

void SetPlayerSpriteFrames(int dmap, int frames){
	SpriteAnimFrames[dmap] = frames;
}

void SetPlayerSpriteAnimDelay(int dmap, int delay){
	SpriteAnimFrameDelay[dmap] = delay;
}

void SetIsInvisible(int dmap, bool setting){
	int set;
	if ( setting ) set = 1;
	IsInvisible[dmap] = set;
}

//Call in ~Init to set up sprites for each DMAP.
void SetPlayerSpriteOptions(int dmap, int sprite, bool invis, int frames, int delay){
	SetPlayerSprite(dmap,sprite);
	SetIsInvisible(dmap,invis);
	SpriteAnimFrames(dmap,frames);
	SpriteAnimFrameDelay(dmap,delay);
}

global script Init{
	void run(){
		SetPlayerSpriteOptions(0,88,true,6,10);
	}
}
	
//condense these all into one array, and then use these constants:

const int EW_PLAYER_SPRITE = 0;
const int EW_PLAYER_INVISIBLE = 512;
const int EW_PLAYER_SPRITE_ANIM = 1024;
const int EW_PLAYER_SPRITE_ANIM_DELAY = 1536;

global script active{
	void run(){
		//Link->Invisible = true;
		int SpriteLink[512]={88}; //Populate with the sprite for Link, based on the DMAP.
		int LinkTile;
		int curDMAP;
		while ( true ) {
			//Trace(Link->Tile);
			if ( Game->GetCurDMap() != curDMAP ) curDMAP = Game->GetCurDMap();
			if ( Link->PressEx1 ) {
				if ( !IsInvisible ) {
					IsInvisible = true;
				}
				else IsInvisible = false;
			}
			
			if ( Link->X == LastLinkX && Link->Y == LastLinkY ) LinkMoved = false;
			if ( Link->X != LastLinkX || Link->Y != LastLinkY ) {
				LastLinkY = Link->Y;
				LastLinkX = Link->X;
				LinkMoved = true;
			}
			PlayerFrameDelay++;
			if ( PlayerFrameDelay >= 10 ) {
				PlayerFrameDelay = 0;
				PlayerFrame++;
			}
			if ( PlayerFrame == 6 ) PlayerFrame = 0;
			
			LinkTile = Link->Tile;
			if ( IsInvisible && !TilesCopiedInvis && TilesCopiedVis ) {
				TilesCopiedVis = false;
				TilesCopiedInvis = true;
				for ( int q = 0; q < TILE_LENGTH; q++ ) {
					CopyTile(BASE_TILE+q, TILES_BACKUP+q);
					CopyTile(TILES_BLANK+q, BASE_TILE+q);
				}
				
			}
			if ( !IsInvisible && TilesCopiedInvis && !TilesCopiedVis ) {
				TilesCopiedInvis = false;
				TilesCopiedVis = true;
				
				int S_Rest[]="Restoring Tiles";
				TraceS(S_Rest);
				for ( int q = 0; q < TILE_LENGTH; q++ ) {
					CopyTile(TILES_BACKUP+q, BASE_TILE+q); 
					//CopyTile(TILES_BLANK+q, TILES_BACKUP+q);
				}
				
				
			}
			
			//if ( Link->Tile != ZQ_BLANK_TILE ) {
			//	CopyTile(LinkTile,ZQ_LAST_TILE);
			//	CopyTile(ZQ_BLANK_TILE,LinkTile);
			//}
			eweapon PlayerSprite = Screen->CreateEWeapon(EW_SCRIPT10);
			PlayerSprite->X = Link->X;
			PlayerSprite->Y = Link->Y;
			PlayerSprite->CollDetection = false;
			PlayerSprite->Dir = Link->Dir;
			PlayerSprite->Flip = Link->Flip;
			PlayerSprite->Frame = PlayerFrame;
			
			int player_sprite = PlayerSprites[curDMAP];
			if ( player_sprite == 0 ) player_sprite = ZQ_SPRITE_BLANK;
			PlayerSprite->UseSprite(player_sprite);
			Waitdraw();
			//if ( LinkMoved) 
			PlayerSprite->DeadState = WDS_DEAD;
			//PlayerSprite(PlayerSprite,SpriteLink);
			Waitframe();
		}
	}
	void PlayerSprite(int SpriteLink, int sprite){
		SpriteLink[0] = sprite;
	}
	
}

void SetPlayerSprite(int dmap, int sprite){
	PlayerSprites[dmap] = sprite;
}

item script PlayerSprites{ 
	void run(int SpriteLink){
		//PlayerSprites[0]=Rand(1,50);
		//if ( !IsInvisible ) {
		//	IsInvisible = true;
		//}
		//else IsInvisible = false;
		
	}
}