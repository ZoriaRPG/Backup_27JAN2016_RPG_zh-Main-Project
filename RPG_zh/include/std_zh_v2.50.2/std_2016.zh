///// 2016

int DirRev(int dir) {
	int bypassshields = 0;
	if ( DIR > 7 ) {
		bypassshields = 8;
		dir = dir - 8;
	}
	if ( dir == DIR_LEFT) return DIR_RIGHT + bypassshields;
	if ( dir == DIR_DOWN) return DIR_UP + bypassshields;
	if ( dir == DIR_UP) return DIR_DOWN + bypassshields;
	if ( dir == DIR_RIGHT) return DIR_LEFT + bypassshields;
	if ( dir == DIR_DOWNLEFT) return DIR_UPRIGHT + bypassshields;
	if ( dir == DIR_DOWNRIGHT) return DIR_UPLEFT + bypassshields;
	if ( dir == DIR_UPLEFT) return DIR_DOWNRIGHT + bypassshields;
	if ( dir == DIR_UPRIGHT) return DIR_DOWNLEFT + bypassshields;
}
	

int SpeedRev(int speed, int reduceinertia){
	if ( speed > 0 ) speed = ((speed * -1) + reduceiertia);
	if ( speed < 0 ) speed = ((speed * -1) - reduceinertia);
	return speed;
}

//Accepts the mass, and velocity if two objects. Determins the acceleration on impact. 
//Returns the net change that would affect both objects. 
int ImpactVelocity(int mass1, int velocity1, int mass2, int velociy2 ) { //, int time){ //time is sed here, as the amount of time that both objects are in contact.
	int momentum1 = mass1*velocity1; //mv1
	int momentum2 = mass2*velociy2; //mv2
	//int accel1;
	//int accel2;
	return momentum1 - momentum2;
}

//Accepts the mass, and velocity if two objects. Determins the acceleration on impact. 
//Returns the change of acceleration for object 'B'. 
int ImpactVelocityA(int massA, int velocityA, int massB, int velociyB ) { //, int time){ //time is sed here, as the amount of time that both objects are in contact.
	int momentumA = massA*velocityA; //mv1
	int momentumB = massB*velociyB; //mv2
	int accelA = momentumA - momentumB;
	int accelB = momentumB - momentumA;
	return momentumA;
}

//Accepts the mass, and velocity if two objects. Determins the acceleration on impact. 
//Returns the change of acceleration for object 'B'.
int ImpactVelocityB(int massA, int velocityA, int massB, int velociyB ) { //, int time){ //time is sed here, as the amount of time that both objects are in contact.
	int momentumA = massA*velocityA; //mv1
	int momentumB = massB*velociyB; //mv2
	int accelA = momentumA - momentumB;
	int accelB = momentumB - momentumA;
	return momentumB;
}

//Accepts the mass, and velocity if two weapons. Determins the acceleration on impact. 
//Changes the Step of both to reflect their mass on collision. 
void ImpactVelocity(lweapon a, eweapon b, int massA, int velocityA, int massB, int velociyB ) { //, int time){ //time is sed here, as the amount of time that both objects are in contact.
	int momentumA = massA*velocityA; //mv1
	int momentumB = massB*velociyB; //mv2
	int accelA = momentumA - momentumB;
	int accelB = momentumB - momentumA;
	a->Step += accelA;
	b->Step += accelB;
}

void ImpactVelocityF(){} //FFC version that will change the direction, and speed of moving ffcs on collision. 

//Returns centre of lweapon, with option to include its HitXOffset
int CenterX(lweapon anLWeapon, bool trueoffset) { 
	if ( trueoffset ) return anLWeapon->X+8*anLWeapon->TileWidth + anLWeapon->HitXOffset;
	else return CenterX(anLWeapon);
}

//Returns centre of lweapon, with option to include its HitYOffset
int CenterY(lweapon anLWeapon, bool trueoffset) {
	if ( trueoffset ) return anLWeapon->Y+8*anLWeapon->TileHeight + anLWeapon->HitYOffset;
	else return CenterX(anLWeapon);
}

//Returns centre of eweapon, with option to include its HitXOffset
int CenterX(eweapon anEWeapon, bool trueoffset) { 
	if ( trueoffset ) return anEWeapon->X+8*anEWeapon->TileWidth + anEWeapon->HitXOffset;
	else return CenterX(anEWeapon);
}

//Returns centre of eweapon, with option to include its HitYOffset
int CenterY(eweapon anEWeapon, bool trueoffset) {
	if ( trueoffset ) return anEWeapon->Y+8*anEWeapon->TileHeight + anEWeapon->HitYOffset;
	else return CenterX(anEWeapon);
}

//Returns centre of npc, with option to include its HitXOffset
int CenterX(npc n, bool trueoffset) { 
	if ( trueoffset ) return n->X+8*n->TileWidth + n->HitXOffset;
	else return CenterX(n);
}

//Returns centre of npc, with option to include its HitYOffset
int CenterY(npc n, bool trueoffset) {
	if ( trueoffset ) return n->Y+8*n->TileHeight + n->HitYOffset;
	else return CenterX(n);
}

//Returns centre of npc, with option to include its HitXOffset
int CenterX(item i, bool trueoffset) { 
	if ( trueoffset ) return i->X+8*i->TileWidth + i->HitXOffset;
	else return CenterX(i);
}

//Returns centre of npc, with option to include its HitYOffset
int CenterY(item i, bool trueoffset) {
	if ( trueoffset ) return i->Y+8*i->TileHeight + i->HitYOffset;
	else return CenterX(i);
}



////////////////

//Returns centre of lweapon, with option to include its HitXOffset
int CenterX(lweapon anLWeapon, bool trueoffset, bool drawoffset) { 
	int lx = anLWeapon->X+8*anLWeapon->TileWidth;
	if ( trueoffset ) lx += anLWeapon->HitXOffset;
	if ( drawoffset ) lx += anLWeapon->DrawXOffset;
	return lx;
}

//Returns centre of lweapon, with option to include its HitYOffset
int CenterY(lweapon anLWeapon, bool trueoffset, bool drawoffset) {
	int ly = anLWeapon->Y+8*anLWeapon->TileHeight;
	if ( trueoffset ) ly += anLWeapon->HitYOffset;
	if ( drawoffset ) ly += anLWeapon->DrawYOffset;
	return ly;
}

//Returns centre of eweapon, with option to include its HitXOffset
int CenterX(eweapon anEWeapon, bool trueoffset, bool drawoffset) { 
	int ex = anEWeapon->X+8*anEWeapon->TileWidth;
	if ( trueoffset ) ex += anEWeapon->HitXOffset;
	if ( drawoffset ) ex += anEWeapon->DrawXOffset;
	return ex;
}

//Returns centre of eweapon, with option to include its HitYOffset
int CenterY(eweapon anEWeapon, bool trueoffset, bool drawoffset) {
	int ey = anEWeapon->Y+8*anEWeapon->TileHeight;
	if ( trueoffset ) ey += anEWeapon->HitYOffset;
	if ( drawoffset ) ey += anEWeapon->DrawYOffset;
	return ey;
}

//Returns centre of npc, with option to include its HitXOffset
int CenterX(npc n, bool trueoffset, bool drawoffset) { 
	int nx = n->X+8*n->TileWidth;
	if ( trueoffset ) nx += n->HitXOffset;
	if ( drawoffset ) nx += n->DrawXOffset;
	return nx;
}

//Returns centre of npc, with option to include its HitYOffset
int CenterY(npc n, bool trueoffset, bool drawoffset) {
	int ny = n->Y+8*n->TileHeight;
	if ( trueoffset ) ny += n->HitYOffset;
	if ( drawoffset ) ny += n->DrawYOffset;
	return ny;
}

//Returns centre of item, with option to include its HitXOffset
int CenterX(item i, bool trueoffset, bool drawoffset) { 
	int nx = i->X+8*i->TileWidth;
	if ( trueoffset ) ix += i->HitXOffset;
	if ( drawoffset ) ix += i->DrawXOffset;
	return ix;
}

//Returns centre of item, with option to include its HitYOffset
int CenterY(item i, bool trueoffset, bool drawoffset) {
	int iy = i->Y+8*i->TileHeight;
	if ( trueoffset ) iy += i->HitYOffset;
	if ( drawoffset ) iy += i->DrawYOffset;
	return iy;
}

////////////////

int CenterLinkX(bool hitoffset) { 
	if ( hitoffset ) return Link->X + 8 * Link->TileWidth + Link->HitXOffset;
	else return Link->X + 8 * Link->TileWidth;
}

int CenterLinkY() {
	if ( hitoffset ) return Link->Y + 8 * Link->TileHeight + Link->HitYOffset;
	else return Link->Y + 8 * Link->TileHeight;
}

int CenterLinkX(bool hitoffset, bool drawoffset) { 
	int lx = Link->X + 8 * Link->TileWidth;
	if ( hitoffset ) lx += Link->HitXOffset;
	if ( drawoffset ) lx += Link->DrawXOffset;	
	return lx;
}

int CenterLinkY() {
	int ly = Link->Y + 8 * Link->TileHeight;
	if ( hitoffset ) ly += Link->HitYOffset;
	if ( drawoffset ) ly += Link->DrawYOffset;	
	return ly;
}


//Returns the direction of the vector from (0, 0) to point, in degrees from -180 to 180. (0 = right)
float Angle(int x, int y) {
  return ArcTan(x, y)*57.2958;
}

//Added: CenterX(item anItem) and CenterY(item anItem) 06-Jan-2016

//Returns the centre coordinates of a combo at position 'loc' similar to Center*() functions, and ComboX/Y.
int CenterComboX(int loc){
	return (loc%16*16) + 8;
}

int CenterComboY(int loc){
	return (loc&0xF0) +8;
}

bool Collision(ffc f, int cmb) { return Collision(cmb,f); }
bool Collision(lweapon l, int cmb) { return Collision(cmb,l); }
bool Collision(eweapon e, int cmb) { return Collision(cmb,e); }
bool Collision(npc n, int cmb) { return Collision(cmb,n); }
bool Collision(item i, int cmb) { return Collision(cmb,i); }



//Check for collision between lweapon 'l' and a combo at location 'cmb'. 
//Set checkcoldetection to true if you wish to return false from an lweapon with ColDetection disabled. 
bool Collision(lweapon l, int cmb, bool checkcoldetection) { 
	if ( checkcoldetection && !l->CollDetection ) return false;
	else return Collision(cmb,l); 
}

bool Collision(int cmb, lweapon l, bool checkcoldetection) { 
	if ( checkcoldetection && !l->CollDetection ) return false;
	else return Collision(cmb,l); 
}


//Check for collision between eweapon 'e' and a combo at location 'cmb' . 
//Set checkcoldetection to true if you wish to return false from an eweapon with ColDetection disabled. 
bool Collision(eweapon e, int cmb, bool checkcoldetection) {
	if ( checkcoldetection && !e->CollDetection ) return false;
	else return Collision(cmb,e); 
}


bool Collision(int cmb, eweapon e, bool checkcoldetection) {
	if ( checkcoldetection && !e->CollDetection ) return false;
	else return Collision(cmb,e); 
}

//Check for collision between NPC 'n' and a combo at location 'cmb' . 
//Set checkcoldetection to true if you wish to return false from an NPC with ColDetection disabled. 
bool Collision(npc n, int cmb, bool checkcoldetection) { 
	if ( checkcoldetection && !n->CollDetection ) return false;
	else return Collision(cmb,n); 
}

bool Collision(int cmb, npc n, bool checkcoldetection) { 
	if ( checkcoldetection && !n->CollDetection ) return false;
	else return Collision(cmb,n); 
}

//Check for collision between Link and a combo at location 'cmb' . 
//Set checkcoldetection to true if you wish to return false from an NPC with ColDetection disabled. 
bool Collision(int cmb, bool checkcoldetection) {
	if ( checkcoldetection && !Link->CollDetection ) return false;
	else return Collision(cmb); 
}

//Check for collision between ffc 'f' and a combo at location 'cmb'. 
bool Collision(int cmb, ffc f){
	int c[8];
	c[0] = ComboX(cmb);
	c[1] = ComboY(cmb);
	c[2] = ComboX(cmb)+16;
	c[3] = ComboY(cmb)+16;
	c[4] = (f->X);
	c[5] = (f->Y);
	c[6] = c[4]+(f->EffectWidth);
	c[7] = c[5]+(f->EffectHeight);
	return RectCollision( c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7] );
}

//Check for collision between lweapon 'l' and a combo at location 'cmb'. 
bool Collision(int cmb, lweapon l){
	int c[8];
	c[0] = ComboX(cmb);
	c[1] = ComboY(cmb);
	c[2] = ComboX(cmb)+16;
	c[3] = ComboY(cmb)+16;
	c[4] = (l->X)+l->HitXOffset+l->DrawXOffset;
	c[5] = (l->Y)+l->HitYOffset+l->DrawYOffset;
	c[6] = c[4]+l->HitWidth;
	c[7] = c[5]+l->HitHeight;
	return RectCollision( c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7] );
}

//Check for collision between eweapon 'e' and a combo at location 'cmb'. 
bool Collision(int cmb, eweapon e){
	int c[8];
	c[0] = ComboX(cmb);
	c[1] = ComboY(cmb);
	c[2] = ComboX(cmb)+16;
	c[3] = ComboY(cmb)+16;
	c[4] = (e->X)+e->HitXOffset+e->DrawXOffset;
	c[5] = (e->Y)+e->HitYOffset+e->DrawYOffset;
	c[5] = c[4]+e->HitWidth;
	c[7] = c[5]+e->HitHeight;
	return RectCollision( c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7] );
}

//Check for collision between npc 'n' and a combo at location 'cmb'. 
bool Collision(int cmb, npc n){
	int c[8];
	c[0] = ComboX(cmb);
	c[1] = ComboY(cmb);
	c[2] = ComboX(cmb)+16;
	c[3] = ComboY(cmb)+16;
	c[4] = (n->X)+n->HitXOffset+n->DrawXOffset;
	c[5] = (n->Y)+n->HitYOffset+n->DrawYOffset;
	c[6] = c[4]+n->HitWidth;
	c[7] = c[5]+n->HitHeight;
	return RectCollision( c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7] );
}

//Check for collision between item 'i' and a combo at location 'cmb'. 
bool Collision(int cmb, item i){
	int c[8];
	c[0] = ComboX(cmb);
	c[1] = ComboY(cmb);
	c[2] = ComboX(cmb)+16;
	c[3] = ComboY(cmb)+16;
	c[4] = (i->X)+i->HitXOffset+i->DrawXOffset;
	c[5] = (i->Y)+i->HitYOffset+i->DrawYOffset;
	c[6] = c[4]+i->HitWidth;
	c[7] = c[5]+i->HitHeight;
	return RectCollision( c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7] );
}


//Check for collision between Link and a combo at location 'cmb'. 
bool Collision(int cmb){
	int c[4];
	c[0] = Link->X+Link->HitXOffset+Link->DrawXOffset;
	c[1] = Link->Y+Link->HitYOffset+Link->DrawYOffset;
	c[2] = c[0]+(Link->HitWidth);
	c[3] = c[1]+(Link->HitHeight);
	if ( !RectCollision( ComboX(loc), ComboY(loc), (ComboX(loc)+16), (ComboY(loc)+16), c[0], c[1], c[2], c[3]) ) return false;
	if ( !Distance(CenterLinkX(), CenterLinkY(), (ComboX(loc)+8), (ComboY(loc)+8)) < 8 ) return false;
	return true;
}

//Returns angle of the given direction.
int DirAngle(int dir){
	dir &=7;
	if (dir==DIR_UP) return 90;
	if (dir==DIR_DOWN) return 270;
	if (dir==DIR_LEFT) return 180;
	if (dir==DIR_RIGHT) return 0;
	if (dir==DIR_LEFTUP) return 135;
	if (dir==DIR_RIGHTUP) return 45;
	if (dir==DIR_LEFTDOWN) return 225;
	if (dir==DIR_RIGHTDOWN) return 315;
	return -1;
}

//Same as DirAngle, but return value is measured in radians.
int DirRad(int dir){
	return DirToAngle(dir)*0.0174;
}