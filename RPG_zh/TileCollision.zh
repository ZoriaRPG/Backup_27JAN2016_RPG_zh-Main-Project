//TileCollision.zh
//v0.2.1

float Vars[147414];
const int FRAME_COUNT = 0;

global script active{
	void run(){
		Vars[FRAME_COUNT] = 1; //Start of a new game, set the frame count at '1'.
		while(true){
			FrameCounter(); //Increase the frame count by 1 each frame, so that we can use it as a reference. 
			Waitdraw();
			Waitframe();
		}
	}
}
			
		
//Runs a counter so that we always know what frame we are on. 
void FrameCounter(){
	if ( Vars[FRAME_COUNT] <= 60 ) Vars[FRAME_COUNT]++;
	else if Vars[FRAME_COUNT] > 60 ) Vars[FRAME_COUNT] = 1;
}

bool DrawTileCollision(npc n, int layer, int x, int y, int tile, int blockw, int blockh, int cset, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int objx = n->X;
	//int objy = n->Y
	//int onbx = n->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( objx <= collBoxX-4 && objx > collBoxX-5 ) || ( objx >= collBoxX +12 && objx < collBoxX+13 ) ) matchX = true;
	//if ( ( objy <= collBoxY-4 && objy > collBoxY-5 ) || ( objy >= collBoxY +12 && objy < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( n->X >= ( x-8 ) && n->X <= (x + (blockw*16) + 8) && n->Y >= ( x-8 ) && ->Y <= ( y + (blockh*16) + 8 ) );
	//! We need f->HitWidth & f->HitHeight in here. 
	//here, we need to consider the collision box of the npc, and calculate X/Y offsets for that, too.
	
}

void DamageNPC(int npc, int damage){
	if ( !Vars[FRAME_COUNT] % 60 ) n->HP -=damage;
}

//Damage NPCs on Collision with Tiles
bool DrawTileCollisionDamage(int damage, int layer, int x, int y, int tile, int blockw, int blockh, int cset, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int objx = n->X;
	//int objy = n->Y
	//int onbx = n->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( objx <= collBoxX-4 && objx > collBoxX-5 ) || ( objx >= collBoxX +12 && objx < collBoxX+13 ) ) matchX = true;
	//if ( ( objy <= collBoxY-4 && objy > collBoxY-5 ) || ( objy >= collBoxY +12 && objy < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	for ( int q = 1; q <= Screen->NumNPCs(); q++ ) {
		if ( ( n->X >= ( x-8 ) && n->X <= (x + (blockw*16) + 8) && n->Y >= ( x-8 ) && ->Y <= ( y + (blockh*16) + 8 ) ) ){
			DamageNPC(n,damage);
	}
	
		//! We need f->HitWidth & f->HitHeight in here. 
	//here, we need to consider the collision box of the npc, and calculate X/Y offsets for that, too.
	
}

bool DrawTileCollision(ffc f, int layer, int x, int y, int tile, int blockw, int blockh, int cset,  int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int objx = f->X;
	//int objy = f->Y
	//int onbx = f->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( objx <= collBoxX-4 && objx > collBoxX-5 ) || ( objx >= collBoxX +12 && objx < collBoxX+13 ) ) matchX = true;
	//if ( ( objy <= collBoxY-4 && objy > collBoxY-5 ) || ( objy >= collBoxY +12 && objy < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( f->X >= ( x-8 ) && f->X <= (x + (blockw*16) + 8) && f->Y >= ( x-8 ) && f->Y <= ( y + (blockh*16) + 8 ) );
	//! We need f->HitWidth & f->HitHeight in here. 
	//here, we need to consider the collision box, size, and other attributes of the ffc, and calculate X/Y offsets for that, too.
	
}

//return ( Link->X >= ( x-4 ) && Link->X <= (collBoxX + 8) && Link->Y >= ( x-4 ) && Link->Y <= ( collBoxY + 8 ) );

bool DrawTileCollision(lweapon l, int layer, int x, int y, int tile, int blockw, int blockh, int cset, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int objx = l->X;
	//int objy = l->Y
	//int onbx = l->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( objx <= collBoxX-4 && objx > collBoxX-5 ) || ( objx >= collBoxX +12 && objx < collBoxX+13 ) ) matchX = true;
	//if ( ( objy <= collBoxY-4 && objy > collBoxY-5 ) || ( objy >= collBoxY +12 && objy < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( l->X >= ( x-8 ) && l->X <= (x + (blockw*16) + 8) && l->Y >= ( x-8 ) && n->Y <= ( y + (blockh*16) + 8 ) );
	//! We need npc hitsize adjustments here. 
	//here, we need to consider the collision box of the object, and calculate X/Y offsets for that, too.	
	
}

bool DrawTileCollision(eweapon e, int layer, int x, int y, int tile, int blockw, int blockh, int cset, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int objx = e->X;
	//int objy = e->Y
	//int onbx = e->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( objx <= collBoxX-4 && objx > collBoxX-5 ) || ( objx >= collBoxX +12 && objx < collBoxX+13 ) ) matchX = true;
	//if ( ( objy <= collBoxY-4 && objy > collBoxY-5 ) || ( objy >= collBoxY +12 && objy < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( e->X >= ( x-8 ) && e->X <= (x + (blockw*16) + 8) && e->Y >= ( x-8 ) && e->Y <= ( y + (blockh*16) + 8 ) );
	//! We need weapon hitboxes in here. 
	//here, we need to consider the collision box of the object, and calculate X/Y offsets for that, too. 
}

//Draws block of tiles and returns if Link is in Collision with them. 
bool DrawTileCollision(layer, int x, int y, int tile, int blockw, int blockh, int cset, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
	//int lx = Link->X; //So that we can modify them to adjust for things, if needed.
	//int ly = Link->Y;
	//int lx = Link->Z; //We should have a separate function with int UseZ, for this. 
	//bool matchX;
	//bool matchY;
	DrawTile(layer, x, y, tile, blockw, blockh, cset, -1, -1, rx, ry, rangle, flip, transparency, opacity);
	//int collBoxX = x + (blockw*16);
	//int collBoxY = y + (blockh*16);
	//if ( ( lx <= collBoxX-4 && lx > collBoxX-5 ) || ( lx >= collBoxX +12 && lx < collBoxX+13 ) ) matchX = true;
	//if ( ( ly <= collBoxY-4 && ly > collBoxY-5 ) || ( ly >= collBoxY +12 && ly < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( Link->X >= ( x-8 ) && Link->X <= (x + (blockw*16) + 8) && Link->Y >= ( x-8 ) && Link->Y <= ( y + (blockh*16) + 8 ) );
	//!Are the hitboxes for large Link autocalculated? Do we need additional constraints?
}
	
//We need additional args to constrain hit size of box. int CollWidthX and int CollWidthY

//DrawCombbo Collision

bool DrawComboCollision( int layer, int x, int y, int combo, int w, int h, int cset, int rx, int ry, int rangle, int frame, int flip, bool transparency, int opacity){
	//int lx = Link->X; //So that we can modify them to adjust for things, if needed.
	//int ly = Link->Y;
	//int lx = Link->Z; //We should have a separate function with int UseZ, for this.
	//bool matchX;
	//bool matchY;
	DrawCombo(layer, x, y, combo, w, h, cset, -1, -1, rx, ry, rangle, frame, flip, transparency opacity);
	//int collBoxX = x + (w*16);
	//int collBoxY = y + (h*16);
	//if ( ( lx <= collBoxX-4 && lx > collBoxX-5 ) || ( lx >= collBoxX +12 && lx < collBoxX+13 ) ) matchX = true;
	//if ( ( ly <= collBoxY-4 && ly > collBoxY-5 ) || ( ly >= collBoxY +12 && ly < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( Link->X >= ( x-8 ) && Link->X <= (x + (blockw*16) + 8) && Link->Y >= ( x-8 ) && Link->Y <= ( y + (blockh*16) + 8 ) );
	//!Are the hitboxes for large Link autocalculated? Do we need additional constraints?
}


bool DrawComboCollision( int layer, int x, int y, int combo, int w, int h, int cset, int rx, int ry, int rangle, int frame, int flip, bool transparency, int opacity, int collWidthX, int collWidthY){
	//int lx = Link->X; //So that we can modify them to adjust for things, if needed.
	//int ly = Link->Y;
	//int lx = Link->Z; //We should have a separate function with int UseZ, for this.
	//bool matchX;
	//bool matchY;
	//DrawCombo(layer, x, y, combo, w, h, cset, -1, -1, rx, ry, rangle, frame, flip, transparency opacity);
	//int collBoxX = x + (w*16) + collWidthX;
	//int collBoxY = y + (h*16) + collWidthY;
	//if ( ( lx <= collBoxX-4 && lx > collBoxX-5 ) || ( lx >= collBoxX +12 && lx < collBoxX+13 ) ) matchX = true;
	//if ( ( ly <= collBoxY-4 && ly > collBoxY-5 ) || ( ly >= collBoxY +12 && ly < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	return ( Link->X >= ( x-8 ) && Link->X <= (x + (blockw*16) + 8 + collWidthX) && Link->Y >= ( x-8 ) && Link->Y <= ( y + (blockh*16) + 8 + collWidthY) );
	//!Are the hitboxes for large Link autocalculated? Do we need additional constraints?
}

bool DrawCircularComboCollision( int layer, int x, int y, int combo, int w, int h, int cset, int rx, int ry, int rangle, int frame, int flip, bool transparency, int opacity){
	int lx = Link->X; //So that we can modify them to adjust for things, if needed.
	int ly = Link->Y;
	int lx = Link->Z; //We should have a separate function with int UseZ, for this.
	int cmbX = x+w;
	int cmbY = x+h;
	int xrad = cmbx / 2; //Use these to gauge distance from the effect.
	int yrad = cmbY / 2;
	
	bool matchX;
	bool matchY;
	
	
	DrawCombo(layer, x, y, combo, w, h, cset, -1, -1, rx, ry, rangle, frame, flip, transparency opacity);
	int collBoxX = x + (w*16);
	int collBoxY = y + (h*16);
	//if ( ( lx <= collBoxX-4 && lx > collBoxX-5 ) || ( lx >= collBoxX +12 && lx < collBoxX+13 ) ) matchX = true;
	//if ( ( ly <= collBoxY-4 && ly > collBoxY-5 ) || ( ly >= collBoxY +12 && ly < collBoxY+13 ) ) matchY = true;
	//if ( matchX && matchY ) return true;
	if ( Distance( LinkCenterX(), LinkCenterY(), cmbX, cmbY ) <= 8+xrad ) return true;
}
